export const COLLISION_GRID_SIZE = 200;

const enemyWithinGridBox = (enemy : EnemyState, gX : number, gY : number) : boolean =>
  boxesOverlap(
    {x: enemy.pos.x - enemy.size.x / 2, y: enemy.pos.y - enemy.size.y / 2, w: enemy.size.x, h: enemy.size.y},
    {x: gX, y: gY, w: COLLISION_GRID_SIZE, h: COLLISION_GRID_SIZE}
  );

const updateCollisionGrid = (state : MultiEnemyState) : MultiEnemyState => {
    let newCollsionGrid : CollisionGrid = {};
    for(let x = 0; x < VIRT_WIDTH; x += COLLISION_GRID_SIZE) {
      for(let y = 0; y < VIRT_HEIGHT; y += COLLISION_GRID_SIZE) {
        newCollsionGrid[`${x}-${y}`] = state.enemies
          .map((enemy, idx) => ({idx: idx, overlaps: enemyWithinGridBox(enemy, x, y)}))
          .filter(({idx, overlaps}) => overlaps)
          .map(({idx}) => idx);
      }
    }

    return {
      ...state,
      collisionGrid: newCollsionGrid
    };
}

const initializeCollisionGrid = () : CollisionGrid => {
  let grid : CollisionGrid = {};
  for(let x = 0; x < VIRT_WIDTH; x += COLLISION_GRID_SIZE) {
    for(let y = 0; y < VIRT_HEIGHT; y += COLLISION_GRID_SIZE) {
      grid[`${x}-${y}`] = [];
    }
  }
  return grid;
}

export type CollisionGrid = {[key: string] : Array<number>}
